# -*- coding: utf-8 -*-
"""
    user

    :copyright: (c) 2012 by Openlabs Technologies & Consulting (P) Limited
    :license: BSD, see LICENSE for more details.
"""
from nereid import request, render_template, redirect, flash, url_for, \
    current_app, abort
from nereid.globals import session
from nereid.signals import login, failed_login
from wtforms import Form, TextField, PasswordField, validators
from itsdangerous import URLSafeTimedSerializer, SignatureExpired, BadData
from trytond.pool import Pool
from trytond.model import ModelSQL, ModelView, fields


class User(ModelSQL, ModelView):
    """Add OATH fields for the user"""
    _name = "nereid.user"

    otp_devices = fields.One2Many(
        'nereid.user.otp_device', 'user', 'OTP Devices'
    )
    active_otp_devices = fields.Function(
        fields.One2Many('nereid.user.otp_device', None, 'Active OTP Devices'),
        'get_active_otp_devices'
    )

    def get_active_otp_devices(self, ids, name):
        """
        Return the active devices of the user
        """
        res = {}
        for user in self.browse(ids):
            res[user.id] = [d.id for d in user.otp_devices if d.active]
        return res

    def verify_otp(self):
        """
        Verifies the OTP in the post request. Expected arguments of the POST
        are::

            device_id: ID of the device record in nereid.user.otp_device
            otp: A one-time password generated by the user.

        """
        device_obj = Pool().get('nereid.user.otp_device')
        next = request.args.get('next', url_for('nereid.website.home'))

        if request.method == "POST":
            signer = URLSafeTimedSerializer(current_app.settings['secret_key'])
            code = request.values['code']
            try:
                user = signer.loads(code, max_age=60 * 3)
            except SignatureExpired:
                flash("Your login expired before you entered the OTP")
                return redirect('nereid.website.login', next=next)
            except BadData:
                flash("There was an error in processing your account")
                return redirect('nereid.website.login', next=next)
            device_id = request.form.get('device_id', type=int)
            if not device_id:
                abort(403)
            device = device_obj.browse(device_id)
            if device.user.id != user:
                # Device does not belong to the user
                abort(403)
            device_type_obj = Pool().get(device.device_type)
            if device_type_obj.verify_otp():
                session['user'] = user
                return redirect(next)
        else:
            code = request.args.get('code')
            if not code:
                flash("Please login before you enter the OTP")
                return redirect('nereid.website.login', next=next)
            return render_template(
                'login-with-device.jinja', user=user, code=code
            )

User()


class LoginForm(Form):
    "Default Login Form"
    email = TextField(_('e-mail'), [validators.Required(), validators.Email()])
    password = PasswordField(_('Password'), [validators.Required()])


class Website(ModelSQL, ModelView):
    _name = "nereid.website"

    def login(self):
        """
        Simple login based on the email and password

        Required post data see :class:LoginForm
        """
        user_obj = Pool().get('nereid.user')
        login_form = LoginForm(request.form)
        next_url = request.values.get('next', url_for('nereid.website.home'))

        if not request.is_guest_user and request.args.get('next'):
            return redirect(request.args['next'])

        if request.method == 'POST' and login_form.validate():
            user = user_obj.authenticate(
                login_form.email.data, login_form.password.data
            )
            # Result can be the following:
            # 1 - Browse record of User (successful login)
            # 2 - None - Login failure without message
            # 3 - Any other false value (no message is shown. useful if you 
            #       want to handle the message shown to user)
            if user:
                # NOTE: Translators leave %s as such
                flash(_("You are now logged in. Welcome %(name)s",
                    name=user.name))
                if user.active_otp_devices:
                    # since there are active OTP devices dont set the user in 
                    # the session, but render a page which shows the second
                    # factor of authentication.
                    signer = URLSafeTimedSerializer(
                        current_app.settings['secret_key']
                    )
                    code = signer.dumps(user.id)
                    return redirect(
                        url_for('nereid.user.verify_otp', next=next, code=code)
                    )
                else:
                    session['user'] = user.id
                    login.send(self)
                    if request.is_xhr:
                        return 'OK'
                    else:
                        return redirect(next_url)
            elif user is None:
                flash(_("Invalid login credentials"))

            failed_login.send(self, form=login_form)

            if request.is_xhr:
                return 'NOK'

        return render_template('login.jinja', login_form=login_form)

Website()


class OTPDevice(ModelSQL, ModelView):
    """OTP devices belonging to an user
    """
    _name = 'nereid.user.otp_device'
    _description = __doc__

    name = fields.Char('Name', required=True)
    user = fields.Many2One('nereid.user', 'User', required=True)
    active = fields.Boolean('Active')

    # Device type is linked to the model
    device_type = fields.Char('Device Type', required=True)

    def __init__(self):
        super(OTPDevice, self).__init__()
        self._sql_constraints += [
            ('device_user_type_unique', 'UNIQUE (user, device_type)',
                'A user ')
        ]

    def default_device_type(self):
        return self._name

    def get_device_type_name(self, device):
        """
        :param device: Browse record of the device
        """
        return Pool().get(device.device_type)

OTPDevice()


class TOTP(ModelSQL, ModelView):
    """TOTP Device"""

    _name = "nereid.otp.device.totp"
    _description = __doc__
    _inherits = {'otp_device': 'nereid.user.otp_device'}

    # TODO: Make this unique
    otp_device = fields.Many2One('nereid.user.otp_device', 'OTP Device')

    #: A hex-encoded secret key of up to 40 bytes.
    key = fields.Char("Key", required=True)

    #: A time step in seconds
    step = fields.Integer("Time Step", required=True, help="In Seconds")

    #: The Unix time at which to begin counting steps.
    t0 = fields.BigInteger("TO", required=True)

    #: The number of digits to expect in a token (6 or 8)
    digits = fields.Integer("Digits", required=True)

    #: The number of time steps in the past or future to allow.
    tolerance = fields.Integer("Tolerance", required=True)

    #: The number of time steps the prover is known to deviate from clock.
    drift = fields.Integer("Known Drift", required=True)

    binary_key = fields.Function(fields.Char("Binary Key"))

    def default_step(self):
        return 30

    def default_t0(self):
        return 0

    def default_digits(self):
        return 6

    def default_tolerance(self):
        return 1

    def verify_otp(self, device):
        """Verifies the OTP and returns True or False. If messages have to be
        returned, then use `~nereid.flash`. The parameters must be taken from
        the request.
        """
        return True

TOTP()
